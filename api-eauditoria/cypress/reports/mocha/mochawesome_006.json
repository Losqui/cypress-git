{
  "stats": {
    "suites": 7,
    "tests": 47,
    "passes": 46,
    "pending": 0,
    "failures": 1,
    "start": "2021-04-29T19:22:10.813Z",
    "end": "2021-04-29T19:22:53.877Z",
    "duration": 43064,
    "testsRegistered": 47,
    "passPercent": 97.87234042553192,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f1a29091-8458-48bf-a492-7547ac108674",
      "title": "",
      "fullFile": "cypress\\integration\\blocoapi.spec.js",
      "file": "cypress\\integration\\blocoapi.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cb5e1244-1809-44fa-9ec7-a4964130c729",
          "title": "1 - Testes API - Cadastro de Bloco (POST)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A - POST - Cadastrando um Bloco",
              "fullTitle": "1 - Testes API - Cadastro de Bloco (POST) A - POST - Cadastrando um Bloco",
              "timedOut": null,
              "duration": 1198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    //idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Teste para versão',\n    descricao: 'Escrituração Contábil Digital alterado cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Teste para versão') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '112233',\n      descricao: 'Leiaute 005 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-02-03T02:00:00',\n        fim: '2025-04-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n  cy.request({\n    method: 'GET',\n    url: '/Leiaute'\n  }).then(function (resposta) {\n    var codigoLeiaute = null;\n    resposta.body.retorno.forEach(function (c) {\n      if (c.codigo === '112233') codigoLeiaute = c.codigo;\n    });\n    expect(codigoLeiaute).to.be.equal('112233');\n  });\n});\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var codigoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '112233') codigoLeiaute = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: codigoLeiaute,\n      codigo: '1741',\n      descricao: 'Versão 10.99',\n      publicacao: '2025-01-01T02:00:00',\n      status: 'Ativo'\n    }\n  }).its('status').should('be.equal', 200); // Buscar pela versão e cadastrar um bloco   \n  cy.request({\n    method: 'GET',\n    url: '/Versao'\n  }).then(function (resposta) {\n    var codigoVersao = null;\n    resposta.body.retorno.forEach(function (c) {\n      if (c.codigo === '1741') codigoVersao = c.id;\n    }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n    cy.request({\n      method: 'POST',\n      url: '/Bloco',\n      body: {\n        idVersao: codigoVersao,\n        ordem: 1,\n        bloco: '18',\n        nome: 'Bloco 1 API',\n        descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n      }\n    }).its('status').should('be.equal', 200);\n  });\n});",
              "err": {},
              "uuid": "e5e1a906-5672-45b2-9131-65a1e0d9f75d",
              "parentUUID": "cb5e1244-1809-44fa-9ec7-a4964130c729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "B - POST - Cadastrando um Bloco com um idVersao que não existe (Não foi possível encontrar o Bloco especificado)",
              "fullTitle": "1 - Testes API - Cadastro de Bloco (POST) B - POST - Cadastrando um Bloco com um idVersao que não existe (Não foi possível encontrar o Bloco especificado)",
              "timedOut": null,
              "duration": 235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/Bloco',\n  body: {\n    idVersao: 'c5050740-2871-423b-9354-24b413a8fdd5',\n    ordem: 1,\n    bloco: '1',\n    nome: 'Bloco 1 API',\n    descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n  },\n  failOnStatusCode: false\n}).as('response');\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors[\"\"][0]).to.be.equal('Não foi possível encontrar o Versão especificado');\n});",
              "err": {},
              "uuid": "fd049b24-28ae-4da1-ad21-ee9603ec5e68",
              "parentUUID": "cb5e1244-1809-44fa-9ec7-a4964130c729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C - POST - Campo Bloco duplicado (Já existe um Bloco com este nome)",
              "fullTitle": "1 - Testes API - Cadastro de Bloco (POST) C - POST - Campo Bloco duplicado (Já existe um Bloco com este nome)",
              "timedOut": null,
              "duration": 1195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Modelo Bloco ducplicado',\n    descricao: 'Escrituração Contábil Digital alterado cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); // Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Modelo Bloco ducplicado') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '7182',\n      descricao: 'Leiaute 7182 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2024-12-01T02:00:00',\n        fim: '2024-12-31T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o leiaute registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var codigoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '7182') codigoLeiaute = c.id;\n  }); //Cadastrando o Versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: codigoLeiaute,\n      codigo: '1099',\n      descricao: 'Duplicidade código 10.99',\n      publicacao: '2025-02-01T02:00:00',\n      status: 'Ativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscar a versão\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codigoVersao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '1099') codigoVersao = c.id;\n  }); // Cadastrando o Bloco utilizando a versão\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codigoVersao,\n      ordem: 1,\n      bloco: '19667',\n      nome: 'Bloco 2 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    }\n  }).its('status').should('be.equal', 200); //Cadastrando o Bloco utilizando o ID da versão cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codigoVersao,\n      ordem: 2,\n      bloco: '19667',\n      nome: 'Bloco 2.1 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Bloco[0]).to.be.equal('Já existe um Bloco com este nome');\n  });\n});",
              "err": {},
              "uuid": "16e6bdb5-4c19-4e1e-872b-bafb6a7eab3f",
              "parentUUID": "cb5e1244-1809-44fa-9ec7-a4964130c729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "D - POST - Campo idVersao vazio (Não foi possível encontrar a Versão especificada)",
              "fullTitle": "1 - Testes API - Cadastro de Bloco (POST) D - POST - Campo idVersao vazio (Não foi possível encontrar a Versão especificada)",
              "timedOut": null,
              "duration": 809,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/Bloco',\n  body: {\n    //idVersao: (codigoVersao),\n    ordem: 2,\n    bloco: '1',\n    nome: 'Bloco 2.1 API',\n    descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n  },\n  failOnStatusCode: false\n}).as('response');\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors[\"\"][0]).to.be.equal('Não foi possível encontrar a Versão especificada'); // expect(resposta.body.errors[\"\"][0]).to.be.equal('Não foi possível encontrar o Versão especificado')\n});",
              "err": {
                "message": "AssertionError: expected 'Não foi possível encontrar o Versão especificado' to equal 'Não foi possível encontrar a Versão especificada'",
                "estack": "AssertionError: expected 'Não foi possível encontrar o Versão especificado' to equal 'Não foi possível encontrar a Versão especificada'\n    at getRet (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:69279:16)\n    at tryCatcher (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:120203:23)\n    at Function.Promise.attempt.Promise.try (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:117478:29)\n    at Context.thenFn (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:69293:23)\n    at Context.then (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:69660:21)\n    at Context.<anonymous> (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:81414:21)\n    at https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:80892:33\n    at tryCatcher (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:120203:23)\n    at Promise._settlePromiseFromHandler (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:118139:31)\n    at Promise._settlePromise (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:118196:18)\n    at Promise._settlePromiseCtx (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:118233:10)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueue (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:114933:12)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueues (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:114938:10)\n    at Async.drainQueues (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:114812:14)",
                "diff": "- Não foi possível encontrar o Versão especificado\n+ Não foi possível encontrar a Versão especificada\n"
              },
              "uuid": "3a4f12db-a925-4ea3-8776-f8a420c08255",
              "parentUUID": "cb5e1244-1809-44fa-9ec7-a4964130c729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "E - POST - Todos os campos obrigatórios vazios",
              "fullTitle": "1 - Testes API - Cadastro de Bloco (POST) E - POST - Todos os campos obrigatórios vazios",
              "timedOut": null,
              "duration": 332,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var nomeVersao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.status === 'Ativo') nomeVersao = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: nomeVersao\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta.body.errors);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Bloco[0]).to.be.equal('O campo de Bloco é obrigatório');\n    expect(resposta.body.errors.Descricao[0]).to.be.equal('O campo de Descrição é obrigatório');\n    expect(resposta.body.errors.Nome[0]).to.be.equal('O campo de Nome é obrigatório');\n  });\n});",
              "err": {},
              "uuid": "57b4c9b7-8a99-42cd-8798-89c103c94a8a",
              "parentUUID": "cb5e1244-1809-44fa-9ec7-a4964130c729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "F - POST - Campo Bloco vazio (O campo de Bloco é obrigatório)",
              "fullTitle": "1 - Testes API - Cadastro de Bloco (POST) F - POST - Campo Bloco vazio (O campo de Bloco é obrigatório)",
              "timedOut": null,
              "duration": 253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var nomeVersao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.status === 'Ativo') nomeVersao = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: nomeVersao,\n      ordem: 2,\n      // bloco: '1',\n      nome: 'Bloco 2.1 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta.body.errors);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Bloco[0]).to.be.equal('O campo de Bloco é obrigatório');\n  });\n});",
              "err": {},
              "uuid": "b34d7237-96d4-4ef5-b693-92a1b28f4438",
              "parentUUID": "cb5e1244-1809-44fa-9ec7-a4964130c729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "G - POST - Campo Nome vazio (O campo de Nome é obrigatório)",
              "fullTitle": "1 - Testes API - Cadastro de Bloco (POST) G - POST - Campo Nome vazio (O campo de Nome é obrigatório)",
              "timedOut": null,
              "duration": 277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var nomeVersao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.status === 'Ativo') nomeVersao = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: nomeVersao,\n      ordem: 3,\n      bloco: '3',\n      // nome: 'Bloco 2.1 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta.body.errors);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Nome[0]).to.be.equal('O campo de Nome é obrigatório');\n  });\n});",
              "err": {},
              "uuid": "a713d5f2-31d0-4de9-9605-d73422349e7e",
              "parentUUID": "cb5e1244-1809-44fa-9ec7-a4964130c729",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "H - POST - Campo Descricao vazio (O campo de Descrição é obrigatório)",
              "fullTitle": "1 - Testes API - Cadastro de Bloco (POST) H - POST - Campo Descricao vazio (O campo de Descrição é obrigatório)",
              "timedOut": null,
              "duration": 286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var nomeVersao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.status === 'Ativo') nomeVersao = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: nomeVersao,\n      ordem: 3,\n      bloco: '3',\n      nome: 'Bloco 3.2 API' // descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta.body.errors);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Descricao[0]).to.be.equal('O campo de Descrição é obrigatório');\n  });\n});",
              "err": {},
              "uuid": "7e255d27-ca83-44db-b5a7-bc4a1e5291d2",
              "parentUUID": "cb5e1244-1809-44fa-9ec7-a4964130c729",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e5e1a906-5672-45b2-9131-65a1e0d9f75d",
            "fd049b24-28ae-4da1-ad21-ee9603ec5e68",
            "16e6bdb5-4c19-4e1e-872b-bafb6a7eab3f",
            "57b4c9b7-8a99-42cd-8798-89c103c94a8a",
            "b34d7237-96d4-4ef5-b693-92a1b28f4438",
            "a713d5f2-31d0-4de9-9605-d73422349e7e",
            "7e255d27-ca83-44db-b5a7-bc4a1e5291d2"
          ],
          "failures": [
            "3a4f12db-a925-4ea3-8776-f8a420c08255"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4585,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b0e68352-20e7-4115-b694-a767523adcf5",
          "title": "2 - Testes API - Cadastro de Bloco (PUT)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A - PUT - Alterar (Bloco) de um Bloco",
              "fullTitle": "2 - Testes API - Cadastro de Bloco (PUT) A - PUT - Alterar (Bloco) de um Bloco",
              "timedOut": null,
              "duration": 1166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    //idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Alter bko',\n    descricao: 'Teste bloco cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Alter bko') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '5926',\n      descricao: 'Leiaute 5926 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '5926') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '1699',\n      descricao: 'Versão 16.99',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '1699') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 4,\n      bloco: '411',\n      nome: 'Bloco 4 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '411'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idVersao: \"\".concat(resposta.body.retorno[0].idVersao),\n      ordem: 4,\n      bloco: '4112',\n      nome: 'Bloco 4 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').its('status').should('be.equal', 200);\ncy.get('@response').its('body.retorno').should('exist');\ncy.request({\n  method: 'GET',\n  url: '/Bloco'\n}).then(function (resposta) {\n  var nomeBloco = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Bloco 4 API') nomeBloco = c.nome;\n  });\n  expect(nomeBloco).to.be.equal('Bloco 4 API');\n});",
              "err": {},
              "uuid": "fd989bf6-0c75-4591-b96f-47a9d3bfd74b",
              "parentUUID": "b0e68352-20e7-4115-b694-a767523adcf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "B - PUT - Alterar (Nome) de um Bloco",
              "fullTitle": "2 - Testes API - Cadastro de Bloco (PUT) B - PUT - Alterar (Nome) de um Bloco",
              "timedOut": null,
              "duration": 1262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Alterando Nome',\n    descricao: 'Teste Nome cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Alterando Nome') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '5599',\n      descricao: 'Leiaute 5599 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '5599') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '1797',\n      descricao: 'Versão 1797',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '1797') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 5,\n      bloco: '59',\n      nome: 'Bloco 5 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '59'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idVersao: \"\".concat(resposta.body.retorno[0].idVersao),\n      ordem: 5,\n      bloco: '59',\n      nome: 'Bloco 5.1 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').its('status').should('be.equal', 200);\ncy.get('@response').its('body.retorno').should('exist');\ncy.request({\n  method: 'GET',\n  url: '/Bloco'\n}).then(function (resposta) {\n  var nomeBloco = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Bloco 5.1 API') nomeBloco = c.nome;\n  });\n  expect(nomeBloco).to.be.equal('Bloco 5.1 API');\n});",
              "err": {},
              "uuid": "3859ab6f-38ef-47d2-923e-e182742354e8",
              "parentUUID": "b0e68352-20e7-4115-b694-a767523adcf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C - PUT - Alterar (Descrição) de um Bloco",
              "fullTitle": "2 - Testes API - Cadastro de Bloco (PUT) C - PUT - Alterar (Descrição) de um Bloco",
              "timedOut": null,
              "duration": 1238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Alterando descrição',\n    descricao: 'Teste descrição cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Alterando descrição') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '7788',\n      descricao: 'Leiaute 7788 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '7788') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '9781',\n      descricao: 'Versão 9781',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '9781') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 6,\n      bloco: '69',\n      nome: 'Bloco 6 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '69'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idVersao: \"\".concat(resposta.body.retorno[0].idVersao),\n      ordem: 6,\n      bloco: '69',\n      nome: 'Bloco 6.1 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO'\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').its('status').should('be.equal', 200);\ncy.get('@response').its('body.retorno').should('exist');\ncy.request({\n  method: 'GET',\n  url: '/Bloco'\n}).then(function (resposta) {\n  var nomeBloco = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Bloco 6.1 API') nomeBloco = c.nome;\n  });\n  expect(nomeBloco).to.be.equal('Bloco 6.1 API');\n});",
              "err": {},
              "uuid": "a517c26c-589b-449b-9c26-21dc26299c7c",
              "parentUUID": "b0e68352-20e7-4115-b694-a767523adcf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "D - PUT - Alterar (Bloco) para vazio (O campo de Bloco é obrigatório)",
              "fullTitle": "2 - Testes API - Cadastro de Bloco (PUT) D - PUT - Alterar (Bloco) para vazio (O campo de Bloco é obrigatório)",
              "timedOut": null,
              "duration": 1031,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Alterando b vazio',\n    descricao: 'Teste bloc cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Alterando b vazio') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '8856',\n      descricao: 'Leiaute 8856 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '8856') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '1898',\n      descricao: 'Versão 1898',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '1898') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 7,\n      bloco: '79',\n      nome: 'Bloco 7 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '79'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idVersao: \"\".concat(resposta.body.retorno[0].idVersao),\n      ordem: 7,\n      //bloco: '79',\n      nome: 'Bloco 7 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Bloco[0]).to.be.equal('O campo de Bloco é obrigatório');\n});",
              "err": {},
              "uuid": "bd26f4f9-3681-410d-b897-f0f3929fe606",
              "parentUUID": "b0e68352-20e7-4115-b694-a767523adcf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "E - PUT - Alterar (Nome) para vazio (O campo de Nome é obrigatório)",
              "fullTitle": "2 - Testes API - Cadastro de Bloco (PUT) E - PUT - Alterar (Nome) para vazio (O campo de Nome é obrigatório)",
              "timedOut": null,
              "duration": 1057,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Alterando Nm vazio',\n    descricao: 'Teste nom cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Alterando Nm vazio') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '6774',\n      descricao: 'Leiaute 6774 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '6774') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '1561',\n      descricao: 'Versão 1561',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '1561') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 8,\n      bloco: '89',\n      nome: 'Bloco 8 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '89'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idVersao: \"\".concat(resposta.body.retorno[0].idVersao),\n      ordem: 8,\n      bloco: '89',\n      // nome: 'Bloco 7 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Nome[0]).to.be.equal('O campo de Nome é obrigatório');\n});",
              "err": {},
              "uuid": "8bfbbaba-c682-4fd6-bc61-3c1d84b0d608",
              "parentUUID": "b0e68352-20e7-4115-b694-a767523adcf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "F - PUT - Alterar (Descrição) para vazio (O campo de Descrição é obrigatório)",
              "fullTitle": "2 - Testes API - Cadastro de Bloco (PUT) F - PUT - Alterar (Descrição) para vazio (O campo de Descrição é obrigatório)",
              "timedOut": null,
              "duration": 995,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Alterando Descric vazio',\n    descricao: 'Teste Descric cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Alterando Descric vazio') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '8579',\n      descricao: 'Leiaute 8579 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '8579') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '46991',\n      descricao: 'Versão 46991',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '46991') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 9,\n      bloco: '99',\n      nome: 'Bloco 9 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '99'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idVersao: \"\".concat(resposta.body.retorno[0].idVersao),\n      ordem: 9,\n      bloco: '99',\n      nome: 'Bloco 9 API' // descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Descricao[0]).to.be.equal('O campo de Descrição é obrigatório');\n});",
              "err": {},
              "uuid": "09823512-dec4-42d4-9907-1d077f0351ed",
              "parentUUID": "b0e68352-20e7-4115-b694-a767523adcf5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "G - PUT - Alterar campo Bloco duplicado (Já existe um Bloco com este nome)",
              "fullTitle": "2 - Testes API - Cadastro de Bloco (PUT) G - PUT - Alterar campo Bloco duplicado (Já existe um Bloco com este nome)",
              "timedOut": null,
              "duration": 1365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Campo duplicado bloco',\n    descricao: 'Teste Descric cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Campo duplicado bloco') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '77854',\n      descricao: 'Leiaute 77854 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '77854') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '58411',\n      descricao: 'Versão 58411',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '58411') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 9,\n      bloco: '85',\n      nome: 'Bloco 9 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200); // segundo bloco\n  cy.request({\n    method: 'GET',\n    url: '/Versao'\n  }).then(function (resposta) {\n    var codigoversao = null;\n    resposta.body.retorno.forEach(function (c) {\n      if (c.codigo === '58411') codigoversao = c.id;\n    });\n    cy.request({\n      method: 'POST',\n      url: '/Bloco',\n      body: {\n        idVersao: codigoversao,\n        ordem: 12,\n        bloco: '105',\n        nome: 'Bloco 101 API',\n        descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n      },\n      failOnStatusCode: false\n    }).its('status').should('be.equal', 200);\n  });\n}); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '105'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idVersao: \"\".concat(resposta.body.retorno[0].idVersao),\n      ordem: 12,\n      bloco: '85',\n      nome: 'Bloco 12 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Bloco[0]).to.be.equal('Já existe um Bloco com este nome');\n});",
              "err": {},
              "uuid": "35226c61-b05a-4b54-af79-3ff8d617368d",
              "parentUUID": "b0e68352-20e7-4115-b694-a767523adcf5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd989bf6-0c75-4591-b96f-47a9d3bfd74b",
            "3859ab6f-38ef-47d2-923e-e182742354e8",
            "a517c26c-589b-449b-9c26-21dc26299c7c",
            "bd26f4f9-3681-410d-b897-f0f3929fe606",
            "8bfbbaba-c682-4fd6-bc61-3c1d84b0d608",
            "09823512-dec4-42d4-9907-1d077f0351ed",
            "35226c61-b05a-4b54-af79-3ff8d617368d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8114,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "688bb907-214f-4fed-a3ae-68a75860e266",
          "title": "3 - Teste API Bloco (Filtros)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A - POST - Populando base com Bloco",
              "fullTitle": "3 - Teste API Bloco (Filtros) A - POST - Populando base com Bloco",
              "timedOut": null,
              "duration": 1067,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    //idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Teste Filtros bloco',\n    descricao: 'Escrituração Contábil Digital alterado cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Teste Filtros bloco') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '965842',\n      descricao: 'Leiaute 005 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-02-03T02:00:00',\n        fim: '2025-04-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n  cy.request({\n    method: 'GET',\n    url: '/Leiaute'\n  }).then(function (resposta) {\n    var codigoLeiaute = null;\n    resposta.body.retorno.forEach(function (c) {\n      if (c.codigo === '965842') codigoLeiaute = c.codigo;\n    });\n    expect(codigoLeiaute).to.be.equal('965842');\n  });\n});\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var codigoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '965842') codigoLeiaute = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: codigoLeiaute,\n      codigo: '71489',\n      descricao: 'Versão 10.99',\n      publicacao: '2025-01-01T02:00:00',\n      status: 'Ativo'\n    }\n  }).its('status').should('be.equal', 200); // Buscar pela versão e cadastrar um bloco   \n  cy.request({\n    method: 'GET',\n    url: '/Versao'\n  }).then(function (resposta) {\n    var codigoVersao = null;\n    resposta.body.retorno.forEach(function (c) {\n      if (c.codigo === '71489') codigoVersao = c.id;\n    }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n    cy.request({\n      method: 'POST',\n      url: '/Bloco',\n      body: {\n        idVersao: codigoVersao,\n        ordem: 1,\n        bloco: '21',\n        nome: 'Bloco 21 API',\n        descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n      }\n    }).its('status').should('be.equal', 200);\n  });\n});",
              "err": {},
              "uuid": "d023fa9f-cc31-4e80-a1e1-bb0c5f937815",
              "parentUUID": "688bb907-214f-4fed-a3ae-68a75860e266",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "B - GET - (Listar todos) Filtrar Bloco pelo Bloco",
              "fullTitle": "3 - Teste API Bloco (Filtros) B - GET - (Listar todos) Filtrar Bloco pelo Bloco",
              "timedOut": null,
              "duration": 158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '21'\n  }\n}).then(function (resposta) {\n  var codigoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.cod === '21') codigoLeiaute = c.cod;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno[0].bloco).to.contain('21');\n});",
              "err": {},
              "uuid": "54f887dc-29eb-4e04-acc3-47b34176f80a",
              "parentUUID": "688bb907-214f-4fed-a3ae-68a75860e266",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C - GET - (Listar todos) Filtrar Bloco pela Descrição",
              "fullTitle": "3 - Teste API Bloco (Filtros) C - GET - (Listar todos) Filtrar Bloco pela Descrição",
              "timedOut": null,
              "duration": 182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n  }\n}).then(function (resposta) {\n  var codigoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.cod === 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS') codigoLeiaute = c.cod;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno[0].descricao).to.contain('ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS');\n});",
              "err": {},
              "uuid": "fa160656-5f6d-4309-8c60-fcf773e86e42",
              "parentUUID": "688bb907-214f-4fed-a3ae-68a75860e266",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "D - GET - (Listar todos) Filtrar Bloco pelo Nome",
              "fullTitle": "3 - Teste API Bloco (Filtros) D - GET - (Listar todos) Filtrar Bloco pelo Nome",
              "timedOut": null,
              "duration": 161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    nome: 'Bloco 21 API'\n  }\n}).then(function (resposta) {\n  var codigoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.cod === 'Bloco 21 API') codigoLeiaute = c.cod;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno[0].nome).to.contain('Bloco 21 API');\n});",
              "err": {},
              "uuid": "68c0ea00-117c-4c4a-a216-b3990c87034b",
              "parentUUID": "688bb907-214f-4fed-a3ae-68a75860e266",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "E - GET - (Listar todos) Filtrar Bloco pelo Termo (Nome)",
              "fullTitle": "3 - Teste API Bloco (Filtros) E - GET - (Listar todos) Filtrar Bloco pelo Termo (Nome)",
              "timedOut": null,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    termo: 'Bloco 21 API'\n  }\n}).then(function (resposta) {\n  var codigoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.cod === 'Bloco 21 API') codigoLeiaute = c.cod;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno[0].nome).to.contain('Bloco 21 API');\n});",
              "err": {},
              "uuid": "313d2a60-0552-4bd0-84a8-329e562eaba4",
              "parentUUID": "688bb907-214f-4fed-a3ae-68a75860e266",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "F - GET - (Listar todos) Filtrar Bloco pelo Termo (Bloco)",
              "fullTitle": "3 - Teste API Bloco (Filtros) F - GET - (Listar todos) Filtrar Bloco pelo Termo (Bloco)",
              "timedOut": null,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    termo: '21'\n  }\n}).then(function (resposta) {\n  var codigoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.cod === 'Bloco 21 API') codigoLeiaute = c.cod;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno[0].nome).to.contain('Bloco 21 API');\n});",
              "err": {},
              "uuid": "91bf1526-ca57-4935-aff3-17b93e7593e4",
              "parentUUID": "688bb907-214f-4fed-a3ae-68a75860e266",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "G - GET - (Listar todos) Filtrar Blocos por uma página especifica e que exista registros",
              "fullTitle": "3 - Teste API Bloco (Filtros) G - GET - (Listar todos) Filtrar Blocos por uma página especifica e que exista registros",
              "timedOut": null,
              "duration": 159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    'Paginacao.Pagina': '1'\n  }\n}).then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.body.retorno.length).to.be.above(1); //Validando se existema mais de 1 registro nessa página \n});",
              "err": {},
              "uuid": "9d6f5ad9-c08d-49bb-a8a8-55af68c3b15b",
              "parentUUID": "688bb907-214f-4fed-a3ae-68a75860e266",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "H - GET - (Listar todos) Filtrar Blocos por uma página que NÃO exista registros",
              "fullTitle": "3 - Teste API Bloco (Filtros) H - GET - (Listar todos) Filtrar Blocos por uma página que NÃO exista registros",
              "timedOut": null,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    'Paginacao.Pagina': '1000'\n  }\n}).then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.body.retorno.length).to.be.equal(0); //Validando se na página 1000 o número de registros seja = 0\n});",
              "err": {},
              "uuid": "044ead50-9163-4974-a68a-1bcf0c29fd09",
              "parentUUID": "688bb907-214f-4fed-a3ae-68a75860e266",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "I - GET - (Listar todos) Filtrar Blocos pelo total de páginas",
              "fullTitle": "3 - Teste API Bloco (Filtros) I - GET - (Listar todos) Filtrar Blocos pelo total de páginas",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    'Paginacao.TotalPorPagina': '2'\n  }\n}).then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.body.retorno.length).to.be.equal(2); //Validando o total de registros disponíveis por página. Nesse teste são 2 por página\n});",
              "err": {},
              "uuid": "f461c030-ae66-4d08-b640-3ea7d9941c0f",
              "parentUUID": "688bb907-214f-4fed-a3ae-68a75860e266",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d023fa9f-cc31-4e80-a1e1-bb0c5f937815",
            "54f887dc-29eb-4e04-acc3-47b34176f80a",
            "fa160656-5f6d-4309-8c60-fcf773e86e42",
            "68c0ea00-117c-4c4a-a216-b3990c87034b",
            "313d2a60-0552-4bd0-84a8-329e562eaba4",
            "91bf1526-ca57-4935-aff3-17b93e7593e4",
            "9d6f5ad9-c08d-49bb-a8a8-55af68c3b15b",
            "044ead50-9163-4974-a68a-1bcf0c29fd09",
            "f461c030-ae66-4d08-b640-3ea7d9941c0f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2439,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e554e913-90cd-45ab-992e-ff0b2ddbd3a6",
          "title": "4 - Teste API Bloco (Validando: Limite de caracteres)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A - POST - Limite de caracteres - Bloco [50]",
              "fullTitle": "4 - Teste API Bloco (Validando: Limite de caracteres) A - POST - Limite de caracteres - Bloco [50]",
              "timedOut": null,
              "duration": 839,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Limite bloc',\n    descricao: 'Teste bloc cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Limite bloc') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '958641',\n      descricao: 'Leiaute 958641 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '958641') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '81279',\n      descricao: 'Versão 16.99',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '81279') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 4,\n      bloco: '11987452445214587459632514785496325174789658214578965214785',\n      nome: 'Bloco 4 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Bloco[0]).to.be.equal('O campo deve ter no máximo 50 caracteres');\n  });\n});",
              "err": {},
              "uuid": "e6d4a488-c650-4a03-82ea-b83eb6ba501a",
              "parentUUID": "e554e913-90cd-45ab-992e-ff0b2ddbd3a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "B - PUT - Limite de caracteres - Bloco [50]",
              "fullTitle": "4 - Teste API Bloco (Validando: Limite de caracteres) B - PUT - Limite de caracteres - Bloco [50]",
              "timedOut": null,
              "duration": 1153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Alterar bloco limite max',\n    descricao: 'Teste bloc cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Alterar bloco limite max') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '951738',\n      descricao: 'Leiaute 951738 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '951738') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '84695',\n      descricao: 'Versão 16.99',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '84695') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 4,\n      bloco: '4',\n      nome: 'Bloco 4 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '4'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idVersao: \"\".concat(resposta.body.retorno[0].idVersao),\n      ordem: 4,\n      bloco: '11987452445214587459632514785496325174789658214578965214785',\n      nome: 'Bloco 4 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Bloco[0]).to.be.equal('O campo deve ter no máximo 50 caracteres');\n  });\n});",
              "err": {},
              "uuid": "aebda71f-574e-4a53-8723-638d8d4ce9b6",
              "parentUUID": "e554e913-90cd-45ab-992e-ff0b2ddbd3a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C - POST - Limite de caracteres - Nome [50]",
              "fullTitle": "4 - Teste API Bloco (Validando: Limite de caracteres) C - POST - Limite de caracteres - Nome [50]",
              "timedOut": null,
              "duration": 871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Campo Nome Limite',\n    descricao: 'Teste bloc cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Campo Nome Limite') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '96321',\n      descricao: 'Leiaute 96321 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '96321') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '856545',\n      descricao: 'Versão 16.99',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '856545') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 4,\n      bloco: '144',\n      nome: '11987452445214587459632514785496325174789658214578965214785',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Nome[0]).to.be.equal('O campo deve ter no máximo 50 caracteres');\n  });\n});",
              "err": {},
              "uuid": "538984d0-3141-4016-89c1-d30a8e127a24",
              "parentUUID": "e554e913-90cd-45ab-992e-ff0b2ddbd3a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "D - PUT - Limite de caracteres - Nome [50]",
              "fullTitle": "4 - Teste API Bloco (Validando: Limite de caracteres) D - PUT - Limite de caracteres - Nome [50]",
              "timedOut": null,
              "duration": 1156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Campo Nome alterar limite max',\n    descricao: 'Teste bloc cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Campo Nome alterar limite max') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '95124',\n      descricao: 'Leiaute 95124 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-06-04T02:00:00',\n        fim: '2025-07-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '95124') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '1983',\n      descricao: 'Versão 16.99',\n      publicacao: '2025-06-01T02:00:00',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codversao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '1983') codversao = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codversao,\n      ordem: 47,\n      bloco: '155',\n      nome: 'Bloco 4 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '155'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idVersao: \"\".concat(resposta.body.retorno[0].idVersao),\n      ordem: 4,\n      bloco: '155',\n      nome: '11987452445214587459632514785496325174789658214578965214785',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Nome[0]).to.be.equal('O campo deve ter no máximo 50 caracteres');\n  });\n});",
              "err": {},
              "uuid": "75d8d14b-c785-4374-a639-e205bb3ef824",
              "parentUUID": "e554e913-90cd-45ab-992e-ff0b2ddbd3a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6d4a488-c650-4a03-82ea-b83eb6ba501a",
            "aebda71f-574e-4a53-8723-638d8d4ce9b6",
            "538984d0-3141-4016-89c1-d30a8e127a24",
            "75d8d14b-c785-4374-a639-e205bb3ef824"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4019,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2e478649-a0d2-4250-ab80-19dcc584924b",
          "title": "5 - Testes API Leiaute - Clonar",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A - POST - Clonar Bloco",
              "fullTitle": "5 - Testes API Leiaute - Clonar A - POST - Clonar Bloco",
              "timedOut": null,
              "duration": 1223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarModelo('Modelo Clone bloco'); //Cadastrando um modelo pra utilizar nos testes de Leiaute\n//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Modelo Clone bloco') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '48891',\n      descricao: 'Leiaute 48891 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-09-04T02:00:00',\n        fim: '2025-10-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '48891') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '2356',\n      descricao: 'Versão 2356',\n      publicacao: '2025-06-11T02:00:00',\n      status: 'Ativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); // Buscar pela versão e cadastrar um bloco   \ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codigoVersao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '2356') codigoVersao = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codigoVersao,\n      ordem: 23,\n      bloco: '23',\n      nome: 'Bloco 23 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    }\n  }).its('status').should('be.equal', 200); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\n  cy.request({\n    method: 'GET',\n    url: '/Bloco',\n    qs: {\n      bloco: '23'\n    }\n  }).then(function (resposta) {\n    cy.request({\n      method: 'POST',\n      url: \"/Bloco/\".concat(resposta.body.retorno[0].id, \"/clone\"),\n      // body:\n      // {\n      //     idLeiaute: `${resposta.body.retorno[0].idLeiaute}`,\n      //     codigo: '11987452445214587459632514785496325174789658214578965214785',\n      //     descricao: 'Versão 119',\n      //     publicacao: '2025-06-11T02:00:00',\n      //     status: 'Inativo'\n      // },\n      failOnStatusCode: false\n    }).as('response');\n    cy.get('@response').then(function (resposta) {\n      console.log(resposta);\n      expect(resposta.status).to.be.equal(200);\n      cy.request({\n        method: 'GET',\n        url: '/Bloco'\n      }).then(function (resposta) {\n        var ordemBloco = null;\n        var nomeBloco = null;\n        var descLeiaute = null;\n        resposta.body.retorno.forEach(function (c) {\n          if (c.bloco === '24') ordemBloco = c.bloco;\n          if (c.nome === 'Bloco 23 API') nomeBloco = c.nome;\n          if (c.descricao === 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS') descLeiaute = c.descricao;\n        });\n        expect(ordemBloco).to.be.equal('24');\n        expect(nomeBloco).to.be.equal('Bloco 23 API');\n        expect(descLeiaute).to.be.equal('ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS');\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "a60bc64f-b66b-4462-97cd-e19c73b4b872",
              "parentUUID": "2e478649-a0d2-4250-ab80-19dcc584924b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a60bc64f-b66b-4462-97cd-e19c73b4b872"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1223,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "532be7b4-56c9-4e95-8106-5bc953246028",
          "title": "6 - Testes API Leiaute - Ordem",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A - PUT - Alterando a ordem dos Blocos",
              "fullTitle": "6 - Testes API Leiaute - Ordem A - PUT - Alterando a ordem dos Blocos",
              "timedOut": null,
              "duration": 1790,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarModelo('Modelo ordenamento de bloco'); //Cadastrando um modelo pra utilizar nos testes de Leiaute\n//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Modelo ordenamento de bloco') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '60988',\n      descricao: 'Leiaute 60988 do descr cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-09-04T02:00:00',\n        fim: '2025-10-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n}); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '60988') nomeModelo = c.id;\n  }); //Cadastrando o versão utilizando o ID do leiaute cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Versao',\n    body: {\n      idLeiaute: nomeModelo,\n      codigo: '232510',\n      descricao: 'Versão 2356',\n      publicacao: '2025-06-11T02:00:00',\n      status: 'Ativo'\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n}); // Buscar pela versão e cadastrar um bloco   \ncy.request({\n  method: 'GET',\n  url: '/Versao'\n}).then(function (resposta) {\n  var codigoVersao = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '232510') codigoVersao = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Bloco',\n    body: {\n      idVersao: codigoVersao,\n      ordem: 1,\n      bloco: '51',\n      nome: 'Bloco 51 API',\n      descricao: 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS'\n    }\n  }).its('status').should('be.equal', 200); //Buscar a versão cadastrada anteriormente para alterar o campo descrição\n  cy.request({\n    method: 'GET',\n    url: '/Bloco',\n    qs: {\n      bloco: '51'\n    }\n  }).then(function (resposta) {\n    cy.request({\n      method: 'POST',\n      url: \"/Bloco/\".concat(resposta.body.retorno[0].id, \"/clone\"),\n      // body:\n      // {\n      //     idLeiaute: `${resposta.body.retorno[0].idLeiaute}`,\n      //     codigo: '11987452445214587459632514785496325174789658214578965214785',\n      //     descricao: 'Versão 119',\n      //     publicacao: '2025-06-11T02:00:00',\n      //     status: 'Inativo'\n      // },\n      failOnStatusCode: false\n    }).as('response');\n    cy.get('@response').then(function (resposta) {\n      console.log(resposta);\n      expect(resposta.status).to.be.equal(200);\n      cy.request({\n        method: 'GET',\n        url: '/Bloco'\n      }).then(function (resposta) {\n        var ordemBloco = null;\n        var nomeBloco = null;\n        var descLeiaute = null;\n        resposta.body.retorno.forEach(function (c) {\n          if (c.bloco === '52') ordemBloco = c.bloco;\n          if (c.nome === 'Bloco 51 API') nomeBloco = c.nome;\n          if (c.descricao === 'ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS') descLeiaute = c.descricao;\n        });\n        expect(ordemBloco).to.be.equal('52');\n        expect(nomeBloco).to.be.equal('Bloco 51 API');\n        expect(descLeiaute).to.be.equal('ABERTURA, IDENTIFICAÇÃO E REFERÊNCIAS');\n      });\n    });\n  });\n});\ncy.request({\n  method: 'GET',\n  url: '/Bloco',\n  qs: {\n    bloco: '51'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Bloco/\".concat(resposta.body.retorno[0].id, \"/ordem\"),\n    body: {\n      ordem: 2\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(200);\n  });\n});",
              "err": {},
              "uuid": "2049c033-9637-49dd-8bd7-f9e5b035ae61",
              "parentUUID": "532be7b4-56c9-4e95-8106-5bc953246028",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2049c033-9637-49dd-8bd7-f9e5b035ae61"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1790,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a12bbc76-32b7-4292-be64-285057c896c9",
          "title": "7 - Testes API Leiaute - DELETE",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A - DELETE - Cadastro de Bloco (1 - A)",
              "fullTitle": "7 - Testes API Leiaute - DELETE A - DELETE - Cadastro de Bloco (1 - A)",
              "timedOut": null,
              "duration": 1048,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(18);\ncy.excluirVersao(1741);\ncy.excluirLeiaute(112233);\ncy.excluirModelo('Teste para versão');",
              "err": {},
              "uuid": "e201f514-3c04-4c43-a52a-e7d4abdbf6bd",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "B - DELETE - Cadastro de Bloco (1 - C)",
              "fullTitle": "7 - Testes API Leiaute - DELETE B - DELETE - Cadastro de Bloco (1 - C)",
              "timedOut": null,
              "duration": 1283,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(19667);\ncy.excluirVersao(1099);\ncy.excluirLeiaute(7182);\ncy.excluirModelo('Modelo Bloco ducplicado');",
              "err": {},
              "uuid": "79d8f367-3427-41d7-95e6-98d29c635dd6",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C - DELETE - Cadastro de Bloco (2 - A)",
              "fullTitle": "7 - Testes API Leiaute - DELETE C - DELETE - Cadastro de Bloco (2 - A)",
              "timedOut": null,
              "duration": 1157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(4112);\ncy.excluirVersao(1699);\ncy.excluirLeiaute(5926);\ncy.excluirModelo('Alter bko');",
              "err": {},
              "uuid": "b7f162cd-b95a-483d-8941-45abbe279676",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "D - DELETE - Cadastro de Bloco (2 - B)",
              "fullTitle": "7 - Testes API Leiaute - DELETE D - DELETE - Cadastro de Bloco (2 - B)",
              "timedOut": null,
              "duration": 999,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(59);\ncy.excluirVersao(1797);\ncy.excluirLeiaute(5599);\ncy.excluirModelo('Alterando Nome');",
              "err": {},
              "uuid": "06845a5a-dafd-44b8-8841-b713738328d1",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "E - DELETE - Cadastro de Bloco (2 - C)",
              "fullTitle": "7 - Testes API Leiaute - DELETE E - DELETE - Cadastro de Bloco (2 - C)",
              "timedOut": null,
              "duration": 928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(69);\ncy.excluirVersao(9781);\ncy.excluirLeiaute(7788);\ncy.excluirModelo('Alterando descrição');",
              "err": {},
              "uuid": "f5635ced-d970-4e67-a193-b90ec3db79b7",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "F - DELETE - Cadastro de Bloco (2 - D)",
              "fullTitle": "7 - Testes API Leiaute - DELETE F - DELETE - Cadastro de Bloco (2 - D)",
              "timedOut": null,
              "duration": 939,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(79);\ncy.excluirVersao(1898);\ncy.excluirLeiaute(8856);\ncy.excluirModelo('Alterando b vazio');",
              "err": {},
              "uuid": "bbdbe697-3906-46de-946c-815d53e1a16e",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "G - DELETE - Cadastro de Bloco (2 - E)",
              "fullTitle": "7 - Testes API Leiaute - DELETE G - DELETE - Cadastro de Bloco (2 - E)",
              "timedOut": null,
              "duration": 911,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(89);\ncy.excluirVersao(1561);\ncy.excluirLeiaute(6774);\ncy.excluirModelo('Alterando Nm vazio');",
              "err": {},
              "uuid": "20f3e2bb-fc91-4ebe-91ea-3bbf07e10a97",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "H - DELETE - Cadastro de Bloco (2 - F)",
              "fullTitle": "7 - Testes API Leiaute - DELETE H - DELETE - Cadastro de Bloco (2 - F)",
              "timedOut": null,
              "duration": 927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(99);\ncy.excluirVersao(46991);\ncy.excluirLeiaute(8579);\ncy.excluirModelo('Alterando Descric vazio');",
              "err": {},
              "uuid": "a6a5cf4c-48b7-4f28-ac7b-54ecd5977443",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "I - DELETE - Cadastro de Bloco (2 - G)",
              "fullTitle": "7 - Testes API Leiaute - DELETE I - DELETE - Cadastro de Bloco (2 - G)",
              "timedOut": null,
              "duration": 4428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(105);\ncy.excluirBloco(85);\ncy.excluirVersao(58411);\ncy.excluirLeiaute(77854);\ncy.excluirModelo('Campo duplicado bloco');",
              "err": {},
              "uuid": "55aff829-70a2-46b3-b0f7-814272dbd119",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "J - DELETE - Cadastro de Bloco (3 - A)",
              "fullTitle": "7 - Testes API Leiaute - DELETE J - DELETE - Cadastro de Bloco (3 - A)",
              "timedOut": null,
              "duration": 952,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(21);\ncy.excluirVersao(71489);\ncy.excluirLeiaute(965842);\ncy.excluirModelo('Teste Filtros bloco');",
              "err": {},
              "uuid": "a12f5b8a-06ad-459c-a44c-189506f66b70",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "K - DELETE - Cadastro de Bloco (4 - A)",
              "fullTitle": "7 - Testes API Leiaute - DELETE K - DELETE - Cadastro de Bloco (4 - A)",
              "timedOut": null,
              "duration": 714,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirVersao(81279);\ncy.excluirLeiaute(958641);\ncy.excluirModelo('Limite bloc');",
              "err": {},
              "uuid": "7f64f36b-95e2-4f1c-8109-22b9a113f5da",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "L - DELETE - Cadastro de Bloco (4 - B)",
              "fullTitle": "7 - Testes API Leiaute - DELETE L - DELETE - Cadastro de Bloco (4 - B)",
              "timedOut": null,
              "duration": 996,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(4);\ncy.excluirVersao(84695);\ncy.excluirLeiaute(951738);\ncy.excluirModelo('Alterar bloco limite max');",
              "err": {},
              "uuid": "73bcc25c-230f-4572-873a-a6c9b19d2368",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "M - DELETE - Cadastro de Bloco (4 - C)",
              "fullTitle": "7 - Testes API Leiaute - DELETE M - DELETE - Cadastro de Bloco (4 - C)",
              "timedOut": null,
              "duration": 769,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirVersao(856545);\ncy.excluirLeiaute(96321);\ncy.excluirModelo('Campo Nome Limite');",
              "err": {},
              "uuid": "5520ef38-2eb2-420f-a618-745799ce9edf",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "N - DELETE - Cadastro de Bloco (4 - D)",
              "fullTitle": "7 - Testes API Leiaute - DELETE N - DELETE - Cadastro de Bloco (4 - D)",
              "timedOut": null,
              "duration": 1053,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(155);\ncy.excluirVersao(1983);\ncy.excluirLeiaute(95124);\ncy.excluirModelo('Campo Nome alterar limite max');",
              "err": {},
              "uuid": "5e47249e-315b-4256-b824-7fb019b4618d",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "O - DELETE - Cadastro de Bloco (5 - A)",
              "fullTitle": "7 - Testes API Leiaute - DELETE O - DELETE - Cadastro de Bloco (5 - A)",
              "timedOut": null,
              "duration": 1321,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(24);\ncy.excluirBloco(23);\ncy.excluirVersao(2356);\ncy.excluirLeiaute(48891);\ncy.excluirModelo('Modelo Clone bloco');",
              "err": {},
              "uuid": "8916cfed-00ac-45f7-b7a9-7867f441a979",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "P - DELETE - Cadastro de Bloco (6 - A)",
              "fullTitle": "7 - Testes API Leiaute - DELETE P - DELETE - Cadastro de Bloco (6 - A)",
              "timedOut": null,
              "duration": 1353,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirBloco(52);\ncy.excluirBloco(51);\ncy.excluirVersao(232510);\ncy.excluirLeiaute(60988);\ncy.excluirModelo('Modelo ordenamento de bloco');",
              "err": {},
              "uuid": "ca22ca89-3147-446a-b1cc-57df111f81ed",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Q - DELETE - ID inválido ",
              "fullTitle": "7 - Testes API Leiaute - DELETE Q - DELETE - ID inválido ",
              "timedOut": null,
              "duration": 170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: \"/Bloco/asdsafsf-fdsfsd\",\n  failOnStatusCode: false\n}).as('response');\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(404);\n  expect(resposta.body.errors[\"\"][0]).to.be.equal('A identificação do Bloco é inválida');\n});",
              "err": {},
              "uuid": "3f8d6916-7f3b-4b71-a590-430793ffe30c",
              "parentUUID": "a12bbc76-32b7-4292-be64-285057c896c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e201f514-3c04-4c43-a52a-e7d4abdbf6bd",
            "79d8f367-3427-41d7-95e6-98d29c635dd6",
            "b7f162cd-b95a-483d-8941-45abbe279676",
            "06845a5a-dafd-44b8-8841-b713738328d1",
            "f5635ced-d970-4e67-a193-b90ec3db79b7",
            "bbdbe697-3906-46de-946c-815d53e1a16e",
            "20f3e2bb-fc91-4ebe-91ea-3bbf07e10a97",
            "a6a5cf4c-48b7-4f28-ac7b-54ecd5977443",
            "55aff829-70a2-46b3-b0f7-814272dbd119",
            "a12f5b8a-06ad-459c-a44c-189506f66b70",
            "7f64f36b-95e2-4f1c-8109-22b9a113f5da",
            "73bcc25c-230f-4572-873a-a6c9b19d2368",
            "5520ef38-2eb2-420f-a618-745799ce9edf",
            "5e47249e-315b-4256-b824-7fb019b4618d",
            "8916cfed-00ac-45f7-b7a9-7867f441a979",
            "ca22ca89-3147-446a-b1cc-57df111f81ed",
            "3f8d6916-7f3b-4b71-a590-430793ffe30c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19948,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}