{
  "stats": {
    "suites": 6,
    "tests": 67,
    "passes": 59,
    "pending": 6,
    "failures": 2,
    "start": "2021-04-12T14:52:24.870Z",
    "end": "2021-04-12T14:52:56.728Z",
    "duration": 31858,
    "testsRegistered": 67,
    "passPercent": 96.72131147540983,
    "pendingPercent": 8.955223880597014,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "82197f9b-bd7b-45a1-9cc5-4f93fb89933d",
      "title": "",
      "fullFile": "cypress\\integration\\leiauteapi.spec.js",
      "file": "cypress\\integration\\leiauteapi.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9f08d60f-d3db-4bcc-8ce2-215f4aeec72a",
          "title": "Testes API - Cadastro de Leiaute",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
              "title": "1 - Testes API Leiaute (POST - PUT)",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A - POST - Cadastrando um Leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) A - POST - Cadastrando um Leiaute",
                  "timedOut": null,
                  "duration": 1067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Cadastrando um modelo pra utilizar nos testes de Leiaute\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Teste para leiaute',\n    descricao: 'Escrituração Contábil Digital alterado cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Teste para leiaute') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99999',\n      descricao: 'Leiaute 005 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-03T02:00:00',\n        fim: '2023-12-03T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n  cy.request({\n    method: 'GET',\n    url: '/Leiaute'\n  }).then(function (resposta) {\n    var codigoLeiaute = null;\n    resposta.body.retorno.forEach(function (c) {\n      if (c.codigo === '99999') codigoLeiaute = c.codigo;\n    });\n    expect(codigoLeiaute).to.be.equal('99999');\n  });\n});",
                  "err": {},
                  "uuid": "80de5b42-ab6d-41b9-b32b-2baeb2307291",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "B - POST - Cadastrando um Leiaute com um idModeloLeiaute que não existe (Não foi possível encontrar o ModeloLeiaute especificado)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) B - POST - Cadastrando um Leiaute com um idModeloLeiaute que não existe (Não foi possível encontrar o ModeloLeiaute especificado)",
                  "timedOut": null,
                  "duration": 2607,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: '/Leiaute',\n  body: {\n    idModeloLeiaute: '320fa4f5-3930-413a-bf17-209b1013cdaa',\n    codigo: '99998',\n    descricao: 'Leiaute 99998 duplicado do modelo EFD Contribuições cy',\n    status: 'Ativo',\n    vigencia: {\n      inicio: '2023-02-03T02:00:00',\n      fim: '2023-12-03T02:00:00'\n    }\n  },\n  failOnStatusCode: false\n}).as('response');\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors[\"\"][0]).to.be.equal('Não foi possível encontrar o ModeloLeiaute especificado');\n});",
                  "err": {
                    "message": "AssertionError: expected 'Não foi possível encontrar o Modelo especificado' to equal 'Não foi possível encontrar o ModeloLeiaute especificado'",
                    "estack": "AssertionError: expected 'Não foi possível encontrar o Modelo especificado' to equal 'Não foi possível encontrar o ModeloLeiaute especificado'\n    at getRet (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:69279:16)\n    at tryCatcher (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:120203:23)\n    at Function.Promise.attempt.Promise.try (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:117478:29)\n    at Context.thenFn (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:69293:23)\n    at Context.then (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:69660:21)\n    at Context.<anonymous> (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:81414:21)\n    at https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:80892:33\n    at tryCatcher (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:120203:23)\n    at Promise._settlePromiseFromHandler (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:118139:31)\n    at Promise._settlePromise (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:118196:18)\n    at Promise._settlePromiseCtx (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:118233:10)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueue (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:114933:12)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueues (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:114938:10)\n    at Async.drainQueues (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:114812:14)",
                    "diff": "- Não foi possível encontrar o Modelo especificado\n+ Não foi possível encontrar o ModeloLeiaute especificado\n"
                  },
                  "uuid": "ae91aa90-7b92-42ef-b0eb-a69c3b5c2125",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "C - POST - Campo Codigo duplicado (Já existe um Leiaute com este código)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) C - POST - Campo Codigo duplicado (Já existe um Leiaute com este código)",
                  "timedOut": null,
                  "duration": 501,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99999',\n      descricao: 'Leiaute 99999 duplicado do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-03T02:00:00',\n        fim: '2023-12-03T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Leiaute[0]).to.be.equal('Já existe um Leiaute com este código');\n  });\n});",
                  "err": {},
                  "uuid": "dd5f5e6a-479e-438e-9ce4-b76c55d0ae60",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "D - POST - Campo idModeloLeiaute vazio (Não foi possível encontrar o ModeloLeiaute especificado)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) D - POST - Campo idModeloLeiaute vazio (Não foi possível encontrar o ModeloLeiaute especificado)",
                  "timedOut": null,
                  "duration": 1420,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: '/Leiaute',\n  body: {\n    codigo: '99997',\n    descricao: 'Leiaute 99997 do modelo EFD Contribuições cy',\n    status: 'Ativo',\n    vigencia: {\n      inicio: '2023-02-03T02:00:00',\n      fim: '2023-12-03T02:00:00'\n    }\n  },\n  failOnStatusCode: false\n}).as('response');\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors[\"\"][0]).to.be.equal('Não foi possível encontrar o ModeloLeiaute especificado');\n});",
                  "err": {
                    "message": "AssertionError: expected 'Não foi possível encontrar o Modelo especificado' to equal 'Não foi possível encontrar o ModeloLeiaute especificado'",
                    "estack": "AssertionError: expected 'Não foi possível encontrar o Modelo especificado' to equal 'Não foi possível encontrar o ModeloLeiaute especificado'\n    at getRet (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:69279:16)\n    at tryCatcher (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:120203:23)\n    at Function.Promise.attempt.Promise.try (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:117478:29)\n    at Context.thenFn (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:69293:23)\n    at Context.then (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:69660:21)\n    at Context.<anonymous> (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:81414:21)\n    at https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:80892:33\n    at tryCatcher (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:120203:23)\n    at Promise._settlePromiseFromHandler (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:118139:31)\n    at Promise._settlePromise (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:118196:18)\n    at Promise._settlePromiseCtx (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:118233:10)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueue (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:114933:12)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueues (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:114938:10)\n    at Async.drainQueues (https://apigestaoleiauteteste.e-auditoria.com.br/__cypress/runner/cypress_runner.js:114812:14)",
                    "diff": "- Não foi possível encontrar o Modelo especificado\n+ Não foi possível encontrar o ModeloLeiaute especificado\n"
                  },
                  "uuid": "baccea5c-d7b2-4556-9c83-ce4f387d2185",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "E - POST - Todos os campos obrigatórios vazios",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) E - POST - Todos os campos obrigatórios vazios",
                  "timedOut": null,
                  "duration": 364,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta.body.errors);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Codigo[0]).to.be.equal('O campo de Código é obrigatório');\n    expect(resposta.body.errors.Descricao[0]).to.be.equal('O campo de Descrição é obrigatório');\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo de Vigencia é obrigatório');\n  });\n});",
                  "err": {},
                  "uuid": "eba5fd23-ffd7-4ddf-a55d-063fd6ce0101",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "F - POST - Campo Codigo vazio (O campo de Codigo é obrigatório)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) F - POST - Campo Codigo vazio (O campo de Codigo é obrigatório)",
                  "timedOut": null,
                  "duration": 361,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '',\n      descricao: 'Leiaute 005 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-03T02:00:00',\n        fim: '2023-12-03T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Codigo[0]).to.be.equal('O campo de Código é obrigatório');\n  });\n});",
                  "err": {},
                  "uuid": "28adb74b-db14-4753-b999-a96ed2df5009",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "G - POST - Campo Descrição vazio (O campo de Descrição é obrigatório)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) G - POST - Campo Descrição vazio (O campo de Descrição é obrigatório)",
                  "timedOut": null,
                  "duration": 319,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99996',\n      descricao: '',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-03T02:00:00',\n        fim: '2023-12-03T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Descricao[0]).to.be.equal('O campo de Descrição é obrigatório');\n  });\n});",
                  "err": {},
                  "uuid": "8a726f8d-1752-4fbb-bc01-e6bdfa54645d",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "H - POST - Campo Status vazio (Campo não obrigatório)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) H - POST - Campo Status vazio (Campo não obrigatório)",
                  "timedOut": null,
                  "duration": 545,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99995',\n      descricao: 'Leiaute 99995 do modelo EFD Contribuições cy',\n      vigencia: {\n        inicio: '2023-12-05T02:00:00',\n        fim: '2024-01-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n  cy.request({\n    method: 'GET',\n    url: '/Leiaute'\n  }).then(function (resposta) {\n    var codigoLeiaute = null;\n    var statusLeiaute = null;\n    resposta.body.retorno.forEach(function (c) {\n      if (c.codigo === '99995') codigoLeiaute = c.codigo;\n      if (c.status === 'Inativo') statusLeiaute = c.status;\n    });\n    expect(codigoLeiaute).to.be.equal('99995');\n    expect(statusLeiaute).to.be.equal('Inativo');\n  });\n});",
                  "err": {},
                  "uuid": "63439dc5-2fbb-47ab-849b-5abe390daaf5",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "I - POST - Campo Vigencia não informado (O campo de Vigencia é obrigatório)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) I - POST - Campo Vigencia não informado (O campo de Vigencia é obrigatório)",
                  "timedOut": null,
                  "duration": 514,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99994',\n      descricao: 'Leiaute 99994 do modelo EFD Contribuições cy',\n      status: 'Ativo'\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo de Vigencia é obrigatório');\n  });\n});",
                  "err": {},
                  "uuid": "e471083d-b900-4c3b-9a75-44505499c5b1",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "J - POST - Campo Início da Vigencia não é informado (O campo de Inicio é obrigatório)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) J - POST - Campo Início da Vigencia não é informado (O campo de Inicio é obrigatório)",
                  "timedOut": null,
                  "duration": 292,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99993',\n      descricao: 'Leiaute 99993 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        fim: '1999-02-02T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta.body.errors.Vigencia[0]);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo de Inicio é obrigatório');\n  });\n});",
                  "err": {},
                  "uuid": "e7dc4144-89d9-4d24-8002-fd3925cf82a6",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "K - POST - Campo Fim da Vigencia não informado (Campo Vigência fim preenchido com null)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) K - POST - Campo Fim da Vigencia não informado (Campo Vigência fim preenchido com null)",
                  "timedOut": null,
                  "duration": 365,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99992',\n      descricao: 'Leiaute 99992 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2024-02-02T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(200); //expect(resposta.body.vigencia.fim).not.be.exist()\n  });\n});",
                  "err": {},
                  "uuid": "b3c7bd4a-7880-4080-911e-76c37d206c2a",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "L - POST - Campo Início da Vigencia maior que Fim (O início do perído deve ser anterior ao fim)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) L - POST - Campo Início da Vigencia maior que Fim (O início do perído deve ser anterior ao fim)",
                  "timedOut": null,
                  "duration": 310,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99991',\n      descricao: 'Leiaute 99991 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '1999-12-04T02:00:00',\n        fim: '1999-02-04T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta.body.errors.Periodo);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O início do perído deve ser anterior ao fim');\n  });\n});",
                  "err": {},
                  "uuid": "4f1f2869-71ab-4eb8-95de-987fb2fbd1ab",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "M - POST - Campo Início da Vigencia (mês) - data inválida (O campo inicio está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) M - POST - Campo Início da Vigencia (mês) - data inválida (O campo inicio está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 414,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99990',\n      descricao: 'Leiaute 99990 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-22-03T02:00:00',\n        fim: '2024-01-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo inicio está em um formato inválido!');\n  });\n});",
                  "err": {},
                  "uuid": "40524f9b-ba64-46eb-8c63-9729e5335698",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "N - POST - Campo Início da Vigencia (dia) - data inválida (O campo inicio está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) N - POST - Campo Início da Vigencia (dia) - data inválida (O campo inicio está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 463,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99990',\n      descricao: 'Leiaute 99990 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-30T02:00:00',\n        fim: '2024-01-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo inicio está em um formato inválido!');\n  });\n});",
                  "err": {},
                  "uuid": "c6180a22-fce9-4157-aa8e-83f1ecc0663c",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "O - POST - Campo Início da Vigencia (Hora) - data inválida (O campo inicio está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) O - POST - Campo Início da Vigencia (Hora) - data inválida (O campo inicio está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 447,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99990',\n      descricao: 'Leiaute 99990 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-25T30:00:00',\n        fim: '2024-01-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo inicio está em um formato inválido!');\n  });\n});",
                  "err": {},
                  "uuid": "f3384dc1-4884-4316-83d2-f00c1965cd17",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "P - POST - Campo Fim da Vigencia (mês) - data inválida (O campo fim está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) P - POST - Campo Fim da Vigencia (mês) - data inválida (O campo fim está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 328,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99990',\n      descricao: 'Leiaute 99990 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-25T00:00:00',\n        fim: '2024-15-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo fim está em um formato inválido!');\n  });\n});",
                  "err": {},
                  "uuid": "9ff8bd8c-5dbf-4f7a-b8a0-28e0f2b46777",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Q - POST - Campo Fim da Vigencia (dia) - data inválida (O campo fim está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) Q - POST - Campo Fim da Vigencia (dia) - data inválida (O campo fim está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 262,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99990',\n      descricao: 'Leiaute 99990 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-25T00:00:00',\n        fim: '2024-01-32T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo fim está em um formato inválido!');\n  });\n});",
                  "err": {},
                  "uuid": "ad11f76b-91ae-4c54-bdfd-543a47356de6",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "R - POST - Campo Fim da Vigencia (hora) - data inválida (O campo fim está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) R - POST - Campo Fim da Vigencia (hora) - data inválida (O campo fim está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '99990',\n      descricao: 'Leiaute 99990 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-25T00:00:00',\n        fim: '2024-01-02T25:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo fim está em um formato inválido!');\n  });\n});",
                  "err": {},
                  "uuid": "868e47e5-b3ce-4a5e-afc7-e9ccb360504d",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "S - POST - Cadastrar Leiaute sem informar o Campo Status (Por padrão deve vir preenchida com Inativo)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) S - POST - Cadastrar Leiaute sem informar o Campo Status (Por padrão deve vir preenchida com Inativo)",
                  "timedOut": null,
                  "duration": 494,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '111111',\n      descricao: 'Leiaute 111111 do modelo EFD Contribuições cy',\n      vigencia: {\n        inicio: '2005-01-01T02:00:00',\n        fim: '2005-02-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200);\n  cy.request({\n    method: 'GET',\n    url: '/Leiaute'\n  }).then(function (resposta) {\n    var codigoLeiaute = null;\n    var statusLeiaute = null;\n    resposta.body.retorno.forEach(function (c) {\n      if (c.codigo === '111111') codigoLeiaute = c.codigo;\n      if (c.status === 'Inativo') statusLeiaute = c.status;\n    });\n    expect(codigoLeiaute).to.be.equal('111111');\n    expect(statusLeiaute).to.be.equal('Inativo');\n  });\n});",
                  "err": {},
                  "uuid": "df17cf4d-be1d-4f05-8c02-4dfd7aea4757",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "T - POST - Cadastrar Leiaute Passando um valor Não numerico no campo Código (Campo deve aceitar apenas valores Numéricos)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) T - POST - Cadastrar Leiaute Passando um valor Não numerico no campo Código (Campo deve aceitar apenas valores Numéricos)",
                  "timedOut": null,
                  "duration": 461,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: 'PPPPP',\n      descricao: 'Leiaute BBBBBB do modelo EFD Contribuições cy',\n      status: \"Ativo\",\n      vigencia: {\n        inicio: '2025-02-02T02:00:00',\n        fim: '2025-03-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Codigo[0]).to.be.equal('Deve ser um inteiro positivo');\n  });\n});",
                  "err": {},
                  "uuid": "45b812d8-5e64-433e-a09b-45cd340d6038",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "U - POST - Cadastrar um Leiaute onde o período de vigência coincide com outro já cadastrado (Existe um conflito de vigência com outro leiaute cadastrado)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) U - POST - Cadastrar um Leiaute onde o período de vigência coincide com outro já cadastrado (Existe um conflito de vigência com outro leiaute cadastrado)",
                  "timedOut": null,
                  "duration": 339,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado no primeiro cenário\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Teste para leiaute') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '98765',\n      descricao: 'Leiaute 005 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-03-03T02:00:00',\n        fim: '2023-10-03T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Leiaute[0]).to.be.equal('Existe um conflito de vigência com outro leiaute cadastrado');\n  });\n});",
                  "err": {},
                  "uuid": "db8e1a3a-0a35-498d-8c80-92df052afb97",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "V - POST - Cadastrar e validar (se Data fim = null, deve ser substituída pela data início do novo leiaute)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) V - POST - Cadastrar e validar (se Data fim = null, deve ser substituída pela data início do novo leiaute)",
                  "timedOut": null,
                  "duration": 1074,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Cadastrar um modelo para ser utilizado nesse cenário\ncy.request({\n  method: 'POST',\n  url: '/ModeloLeiaute',\n  body: {\n    idEscopo: '012644f1-34c5-452e-a40d-5a3c2fa70d46',\n    nome: 'Testando leiautes',\n    descricao: 'Escrituração Digital cy',\n    tipoArquivo: 'Separador',\n    configArquivo: '|'\n  }\n}).its('status').should('be.equal', 200); //Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Testando leiautes') nomeModelo = c.id;\n  }); //Cadastrar um Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '56789',\n      descricao: 'Leiaute 56789 do modelo cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2025-01-03T00:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).its('status').should('be.equal', 200); //Cadasrar um segundo leiaute para o mesmo modelo\n  //de forma que a data fim desse primeiro leiaute seja alterada automaticamente \n  //de null para data vigência início do segundo leiaute cadastrado\n  cy.request({\n    method: 'GET',\n    url: '/ModeloLeiaute'\n  }).then(function (resposta) {\n    var nomeModelo = null;\n    resposta.body.retorno.forEach(function (c) {\n      if (c.nome === 'Testando leiautes') nomeModelo = c.id;\n    }); //Cadastrando o segundo Leiaute utilizando o ID do modelo cadastrado acima\n    cy.request({\n      method: 'POST',\n      url: '/Leiaute',\n      body: {\n        idModeloLeiaute: nomeModelo,\n        codigo: '4859',\n        descricao: 'Leiaute 005 do modelo EFD Contribuições cy',\n        status: 'Ativo',\n        vigencia: {\n          inicio: '2025-06-03T00:00:00',\n          fim: '2025-10-03T00:00:00'\n        }\n      },\n      failOnStatusCode: false\n    }).as('response'); //Validar se o primeiro leiaute que tinha a data fim = null foi atualizado\n    cy.request({\n      method: 'GET',\n      url: '/Leiaute'\n    }).then(function (resposta) {\n      var codigoLeiaute = null;\n      var statusLeiaute = null;\n      resposta.body.retorno.forEach(function (c) {\n        if (c.codigo === '56789') codigoLeiaute = c.codigo;\n        if (c.vigencia.fim === '2025-06-02T00:00:00') statusLeiaute = c.vigencia.fim;\n      }); //console.log(resposta.body.retorno[4])\n      expect(codigoLeiaute).to.be.equal('56789'), expect(statusLeiaute).to.be.equal('2025-06-02T00:00:00');\n    });\n  });\n});",
                  "err": {},
                  "uuid": "7a1aca7c-61dc-4427-9d52-ca223052ac7a",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "X - PUT - Alterar (Descrição) de um Leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) X - PUT - Alterar (Descrição) de um Leiaute",
                  "timedOut": null,
                  "duration": 606,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//esse teste quebrou. por que na busca GET ele trouxe dois resultados com 99999\n//assim ele pegou um leiaute que eu não queria.\n//para resolver, preciso apagar esse registro com o codigo = 99999000\n//o problema é que eu apaguei o modelo desse leiaute e por isso não me permite deletar os leiautes iniciando com 99999\ncy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '99999'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '99999',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2023-02-03T02:00:00',\n        fim: '2023-12-03T02:00:00'\n      }\n    }\n  }).as('response');\n});\ncy.get('@response').its('status').should('be.equal', 200);\ncy.get('@response').its('body.retorno').should('exist');\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var descricaoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.descricao === 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy') descricaoLeiaute = c.descricao;\n  });\n  expect(descricaoLeiaute).to.be.equal('Leiaute 99999 do modelo EFD Contribuições alterado pelo cy');\n});",
                  "err": {},
                  "uuid": "87b05a47-20af-4834-b85c-10cb508adb73",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Z - PUT - Alterar (Status) de um Leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) Z - PUT - Alterar (Status) de um Leiaute",
                  "timedOut": null,
                  "duration": 458,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '99999'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '99999',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-02-03T02:00:00',\n        fim: '2023-12-03T02:00:00'\n      }\n    }\n  }).as('response');\n});\ncy.get('@response').its('status').should('be.equal', 200);\ncy.get('@response').its('body.retorno').should('exist');\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var statusLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.status === 'Inativo') statusLeiaute = c.status;\n  });\n  expect(statusLeiaute).to.be.equal('Inativo');\n});",
                  "err": {},
                  "uuid": "710baca7-28b7-43ff-9bee-de6cfaf16940",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "K - PUT - Alterar (vigencia.Início) de um Leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) K - PUT - Alterar (vigencia.Início) de um Leiaute",
                  "timedOut": null,
                  "duration": 1662,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '99999'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '99999',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-02-01T01:00:00',\n        fim: '2023-12-03T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').its('status').should('be.equal', 200);\ncy.get('@response').its('body.retorno').should('exist'); // cy.request({\n//     method: 'GET',\n//     url: '/Leiaute'\n// }).then (resposta => {\n//     let inicioLeiaute = null\n//     resposta.body.retorno.forEach(c => {\n//         if(c.ini === '2003-01-01T02:00:00') inicioLeiaute = c.ini\n// })\n// console.log(resposta)\n// //expect(resposta.body.retorno[0].vigencia.inicio).to.contain('2004-01-01T02:00:00')\n// expect(resposta.body.retorno[0].vigencia.inicio).to.be.equal('2003-01-01T02:00:00')\n//})",
                  "err": {},
                  "uuid": "47bb49f2-7047-4b74-b3da-7ed5ab4d28c2",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "W - PUT - Alterar (vigencia.Fim) de um Leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) W - PUT - Alterar (vigencia.Fim) de um Leiaute",
                  "timedOut": null,
                  "duration": 279,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '99999'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '99999',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-02-01T01:00:00',\n        fim: '2023-12-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').its('status').should('be.equal', 200);\ncy.get('@response').its('body.retorno').should('exist'); // cy.request({\n//     method: 'GET',\n//     url: '/Leiaute'\n// }).then (resposta => {\n//     let inicioLeiaute = null\n//     resposta.body.retorno.forEach(c => {\n//         if(c.dtini === '2022-01-02T02:00:00') inicioLeiaute = c.dtini\n//     })\n//     expect(inicioLeiaute).to.be.equal ('2022-01-02T02:00:00')\n// })",
                  "err": {},
                  "uuid": "65a1e487-2032-40e0-a8ff-0b73b6fab1eb",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Y - PUT - Alterar (codigo) de um Leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) Y - PUT - Alterar (codigo) de um Leiaute",
                  "timedOut": null,
                  "duration": 487,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '99999'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-02-01T01:00:00',\n        fim: '2023-12-01T02:00:00'\n      }\n    }\n  }).as('response');\n});\ncy.get('@response').its('status').should('be.equal', 200);\ncy.get('@response').its('body.retorno').should('exist');\ncy.request({\n  method: 'GET',\n  url: '/Leiaute'\n}).then(function (resposta) {\n  var codLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.codigo === '88888') codLeiaute = c.codigo;\n  });\n  expect(codLeiaute).to.be.equal('88888');\n});",
                  "err": {},
                  "uuid": "ecc9979f-107c-492d-b93f-f23eafa5a82d",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AA - PUT - Alterar um Leiaute passando um valor não numérico no campo Código (Campo deve aceitar apenas valores Numéricos)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AA - PUT - Alterar um Leiaute passando um valor não numérico no campo Código (Campo deve aceitar apenas valores Numéricos)",
                  "timedOut": null,
                  "duration": 293,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: 'rrrrr',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-02-01T01:00:00',\n        fim: '2023-12-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Codigo[0]).to.be.equal('Deve ser um inteiro positivo');\n});",
                  "err": {},
                  "uuid": "352630c6-0bbf-4052-9354-e465dfb0a9e9",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AB - PUT - Alterar campo Codigo vazio (O campo de Codigo é obrigatório)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AB - PUT - Alterar campo Codigo vazio (O campo de Codigo é obrigatório)",
                  "timedOut": null,
                  "duration": 238,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-02-01T01:00:00',\n        fim: '2023-12-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Codigo[0]).to.be.equal('O campo de Codigo é obrigatório');\n});",
                  "err": {},
                  "uuid": "857adfc6-c6a9-4873-9e32-8f41bc0061ea",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AC - PUT - Alterar campo Descrição vazio (O campo de Descrição é obrigatório)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AC - PUT - Alterar campo Descrição vazio (O campo de Descrição é obrigatório)",
                  "timedOut": null,
                  "duration": 273,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: '',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-02-01T01:00:00',\n        fim: '2023-12-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Descricao[0]).to.be.equal('O campo de Descrição é obrigatório');\n});",
                  "err": {},
                  "uuid": "7b212e1e-1d64-4c58-936e-4750aae4da47",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AD - PUT - Alterar campo Vigencia vazio (O campo de Vigencia é obrigatório)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AD - PUT - Alterar campo Vigencia vazio (O campo de Vigencia é obrigatório)",
                  "timedOut": null,
                  "duration": 346,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo'\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo de Vigencia é obrigatório');\n});",
                  "err": {},
                  "uuid": "aa6ff0da-a0cd-4fd8-b983-40d5fcb3fbed",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AE - PUT - Alterar campo Início da Vigencia não informado (O campo de Vigencia é obrigatório)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AE - PUT - Alterar campo Início da Vigencia não informado (O campo de Vigencia é obrigatório)",
                  "timedOut": null,
                  "duration": 309,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Não acho necessário tal verificação. O que vai acontecer é que o campo início não será alterado\ncy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        fim: '2023-12-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400); //expect(resposta.body.errors.Leiaute[0]).to.be.equal('Existe um conflito de vigência com outro leiaute cadastrado')\n  expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo de Inicio é obrigatório');\n});",
                  "err": {},
                  "uuid": "f9b01a85-1076-45da-9bbe-a396c538fa9f",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AF - PUT - Alterar campo Início da Vigencia (mês) - data inválida (O campo inicio está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AF - PUT - Alterar campo Início da Vigencia (mês) - data inválida (O campo inicio está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 345,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Não acho necessário tal verificação. O que vai acontecer é que o campo início não será alterado\ncy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-22-03T02:00:00',\n        fim: '2024-01-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400); //expect(resposta.body.errors.Leiaute[0]).to.be.equal('Existe um conflito de vigência com outro leiaute cadastrado')\n  expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo inicio está em um formato inválido!');\n});",
                  "err": {},
                  "uuid": "b8e5eacb-f1ed-4143-9131-4b7d0239baa2",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AG - PUT - Alterar campo Início da Vigencia (dia) - data inválida (O campo inicio está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AG - PUT - Alterar campo Início da Vigencia (dia) - data inválida (O campo inicio está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 293,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Não acho necessário tal verificação. O que vai acontecer é que o campo início não será alterado\ncy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-12-33T02:00:00',\n        fim: '2024-01-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400); //expect(resposta.body.errors.Leiaute[0]).to.be.equal('Existe um conflito de vigência com outro leiaute cadastrado')\n  expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo inicio está em um formato inválido!');\n});",
                  "err": {},
                  "uuid": "74600f8c-59f2-4236-ac90-94fcdde071e0",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AH - PUT - Alterar campo Início da Vigencia (hora) - data inválida (O campo inicio está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AH - PUT - Alterar campo Início da Vigencia (hora) - data inválida (O campo inicio está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 341,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Não acho necessário tal verificação. O que vai acontecer é que o campo início não será alterado\ncy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-12-03T32:00:00',\n        fim: '2024-01-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400); //expect(resposta.body.errors.Leiaute[0]).to.be.equal('Existe um conflito de vigência com outro leiaute cadastrado')\n  expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo inicio está em um formato inválido!');\n});",
                  "err": {},
                  "uuid": "ccf0bb04-e6c4-4a9b-a08e-73c55a14ce43",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AI - PUT - Alterar campo Fim da Vigencia (mês) - data inválida (O campo fim está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AI - PUT - Alterar campo Fim da Vigencia (mês) - data inválida (O campo fim está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 355,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Não acho necessário tal verificação. O que vai acontecer é que o campo início não será alterado\ncy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-10-03T02:00:00',\n        fim: '2024-21-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400); //expect(resposta.body.errors.Leiaute[0]).to.be.equal('Existe um conflito de vigência com outro leiaute cadastrado')\n  expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo fim está em um formato inválido!');\n});",
                  "err": {},
                  "uuid": "cb177b3d-74bc-4886-bd91-8d70076818a3",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AJ - PUT - Alterar campo Fim da Vigencia (dia) - data inválida (O campo fim está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AJ - PUT - Alterar campo Fim da Vigencia (dia) - data inválida (O campo fim está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 367,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Não acho necessário tal verificação. O que vai acontecer é que o campo início não será alterado\ncy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-12-03T02:00:00',\n        fim: '2024-01-41T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400); //expect(resposta.body.errors.Leiaute[0]).to.be.equal('Existe um conflito de vigência com outro leiaute cadastrado')\n  expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo fim está em um formato inválido!');\n});",
                  "err": {},
                  "uuid": "b771fc4b-2c81-4974-9897-ed4e5608e167",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AL - PUT - Alterar campo Fim da Vigencia (hora) - data inválida (O campo fim está em um formato inválido!)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 1 - Testes API Leiaute (POST - PUT) AL - PUT - Alterar campo Fim da Vigencia (hora) - data inválida (O campo fim está em um formato inválido!)",
                  "timedOut": null,
                  "duration": 295,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Não acho necessário tal verificação. O que vai acontecer é que o campo início não será alterado\ncy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '88888',\n      descricao: 'Leiaute 99999 do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2023-12-03T02:00:00',\n        fim: '2024-01-01T32:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400); //expect(resposta.body.errors.Leiaute[0]).to.be.equal('Existe um conflito de vigência com outro leiaute cadastrado')\n  expect(resposta.body.errors.Vigencia[0]).to.be.equal('O campo fim está em um formato inválido!');\n});",
                  "err": {},
                  "uuid": "d3aff62f-16e8-4e67-ae45-dbca5af3cca2",
                  "parentUUID": "1c59e528-7d35-45a8-a32e-777a3d6470d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80de5b42-ab6d-41b9-b32b-2baeb2307291",
                "dd5f5e6a-479e-438e-9ce4-b76c55d0ae60",
                "eba5fd23-ffd7-4ddf-a55d-063fd6ce0101",
                "28adb74b-db14-4753-b999-a96ed2df5009",
                "8a726f8d-1752-4fbb-bc01-e6bdfa54645d",
                "63439dc5-2fbb-47ab-849b-5abe390daaf5",
                "e471083d-b900-4c3b-9a75-44505499c5b1",
                "e7dc4144-89d9-4d24-8002-fd3925cf82a6",
                "b3c7bd4a-7880-4080-911e-76c37d206c2a",
                "4f1f2869-71ab-4eb8-95de-987fb2fbd1ab",
                "40524f9b-ba64-46eb-8c63-9729e5335698",
                "c6180a22-fce9-4157-aa8e-83f1ecc0663c",
                "f3384dc1-4884-4316-83d2-f00c1965cd17",
                "9ff8bd8c-5dbf-4f7a-b8a0-28e0f2b46777",
                "ad11f76b-91ae-4c54-bdfd-543a47356de6",
                "868e47e5-b3ce-4a5e-afc7-e9ccb360504d",
                "df17cf4d-be1d-4f05-8c02-4dfd7aea4757",
                "45b812d8-5e64-433e-a09b-45cd340d6038",
                "db8e1a3a-0a35-498d-8c80-92df052afb97",
                "7a1aca7c-61dc-4427-9d52-ca223052ac7a",
                "87b05a47-20af-4834-b85c-10cb508adb73",
                "710baca7-28b7-43ff-9bee-de6cfaf16940",
                "47bb49f2-7047-4b74-b3da-7ed5ab4d28c2",
                "65a1e487-2032-40e0-a8ff-0b73b6fab1eb",
                "ecc9979f-107c-492d-b93f-f23eafa5a82d",
                "352630c6-0bbf-4052-9354-e465dfb0a9e9",
                "857adfc6-c6a9-4873-9e32-8f41bc0061ea",
                "7b212e1e-1d64-4c58-936e-4750aae4da47",
                "aa6ff0da-a0cd-4fd8-b983-40d5fcb3fbed",
                "f9b01a85-1076-45da-9bbe-a396c538fa9f",
                "b8e5eacb-f1ed-4143-9131-4b7d0239baa2",
                "74600f8c-59f2-4236-ac90-94fcdde071e0",
                "ccf0bb04-e6c4-4a9b-a08e-73c55a14ce43",
                "cb177b3d-74bc-4886-bd91-8d70076818a3",
                "b771fc4b-2c81-4974-9897-ed4e5608e167",
                "d3aff62f-16e8-4e67-ae45-dbca5af3cca2"
              ],
              "failures": [
                "ae91aa90-7b92-42ef-b0eb-a69c3b5c2125",
                "baccea5c-d7b2-4556-9c83-ce4f387d2185"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20155,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "34129f45-62d1-46d1-85e7-d40bdb814543",
              "title": "2 - Teste API Leiaute (Filtros)",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A - POST - Populando base com Leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute 2 - Teste API Leiaute (Filtros) A - POST - Populando base com Leiaute",
                  "timedOut": null,
                  "duration": 682,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.nome === 'Teste para leiaute') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '77777',\n      descricao: 'Leiaute 77777 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2024-03-01T02:00:00',\n        fim: '2024-03-30T02:00:00'\n      }\n    }\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "5d93d7a5-38d3-4bf3-9126-412bfbf9b15d",
                  "parentUUID": "34129f45-62d1-46d1-85e7-d40bdb814543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "B - GET - (Listar todos) Filtrar leiaute pelo Codigo",
                  "fullTitle": "Testes API - Cadastro de Leiaute 2 - Teste API Leiaute (Filtros) B - GET - (Listar todos) Filtrar leiaute pelo Codigo",
                  "timedOut": null,
                  "duration": 373,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    Codigo: '88888'\n  }\n}).then(function (resposta) {\n  var codigoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.cod === '88888') codigoLeiaute = c.cod;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno[0].codigo).to.contain('88888');\n});",
                  "err": {},
                  "uuid": "8e70d13c-0f40-4a52-a32a-a06c474b8f6a",
                  "parentUUID": "34129f45-62d1-46d1-85e7-d40bdb814543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "C - GET - (Listar todos) Filtrar leiaute pela Descrição",
                  "fullTitle": "Testes API - Cadastro de Leiaute 2 - Teste API Leiaute (Filtros) C - GET - (Listar todos) Filtrar leiaute pela Descrição",
                  "timedOut": null,
                  "duration": 280,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    Descricao: '77777'\n  }\n}).then(function (resposta) {\n  var descricaoLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.desc === '77777') descricaoLeiaute = c.desc;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno[0].descricao).to.contain('77777');\n});",
                  "err": {},
                  "uuid": "e4bb1c7e-2e56-4b29-ae1c-8dadd49b1321",
                  "parentUUID": "34129f45-62d1-46d1-85e7-d40bdb814543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "D - GET - (Listar todos) Filtrar leiaute pelo Status",
                  "fullTitle": "Testes API - Cadastro de Leiaute 2 - Teste API Leiaute (Filtros) D - GET - (Listar todos) Filtrar leiaute pelo Status",
                  "timedOut": null,
                  "duration": 251,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    Status: 'Ativo'\n  }\n}).then(function (resposta) {\n  var statusLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.statu === 'Ativo') statusLeiaute = c.statu;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno[0].status).to.contain('Ativo');\n  expect(resposta.body.retorno.length).to.be.above(1); //Validando se existema mais de 1 registro nessa página \n});",
                  "err": {},
                  "uuid": "de0036d0-e7f1-4149-acfc-c65866599bf9",
                  "parentUUID": "34129f45-62d1-46d1-85e7-d40bdb814543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "E - GET - (Listar todos) Filtrar leiaute pela Vigência.Início",
                  "fullTitle": "Testes API - Cadastro de Leiaute 2 - Teste API Leiaute (Filtros) E - GET - (Listar todos) Filtrar leiaute pela Vigência.Início",
                  "timedOut": null,
                  "duration": 202,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    'Vigencia.Inicio': '2024-02-01T02:00:00'\n  }\n}).then(function (resposta) {\n  var inicioLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.ini === '2024-02-01T02:00:00') inicioLeiaute = c.ini;\n  });\n  console.log(resposta); //expect(resposta.body.retorno[0].vigencia.inicio).to.be.equal('2004-02-01T02:00:00')\n  // Assertiva acima: como ela ta retornando mais de um registro o teste quebra, mas ele ta certo\n  expect(resposta.body.retorno.length).to.be.above(1); //Validando se existema mais de 1 registro nessa página \n});",
                  "err": {},
                  "uuid": "3d6eb64d-b1a9-4464-ad6d-48c48a83c65f",
                  "parentUUID": "34129f45-62d1-46d1-85e7-d40bdb814543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "F - GET - (Listar todos) Filtrar leiaute pela Vigência.Fim",
                  "fullTitle": "Testes API - Cadastro de Leiaute 2 - Teste API Leiaute (Filtros) F - GET - (Listar todos) Filtrar leiaute pela Vigência.Fim",
                  "timedOut": null,
                  "duration": 369,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    'Vigencia.Fim': '2024-03-01T02:00:00'\n  }\n}).then(function (resposta) {\n  var fimLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.fm === '2024-03-01T02:00:00') fimLeiaute = c.fm;\n  });\n  console.log(resposta); //expect(resposta.body.retorno[0].vigencia.fim).to.be.equal('2004-03-01T02:00:00') \n  // Assertiva acima: como ela ta retornando mais de um registro o teste quebra, mas ele ta certo\n  expect(resposta.body.retorno.length).to.be.above(1); //Validando se existema mais de 1 registro nessa página \n});",
                  "err": {},
                  "uuid": "58deadb5-8d4a-49be-a759-d3ad46ba6f2e",
                  "parentUUID": "34129f45-62d1-46d1-85e7-d40bdb814543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "G - GET - (Listar todos) Filtrar leiaute por uma página especifica e que exista registros",
                  "fullTitle": "Testes API - Cadastro de Leiaute 2 - Teste API Leiaute (Filtros) G - GET - (Listar todos) Filtrar leiaute por uma página especifica e que exista registros",
                  "timedOut": null,
                  "duration": 325,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    'Paginacao.Pagina': '1'\n  }\n}).then(function (resposta) {\n  var fimLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.fm === '2024-03-01T02:00:00') fimLeiaute = c.fm;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno.length).to.be.above(1); //Validando se existema mais de 1 registro nessa página \n});",
                  "err": {},
                  "uuid": "b4a0fbc7-569c-4c50-b95c-a7b94a4caa78",
                  "parentUUID": "34129f45-62d1-46d1-85e7-d40bdb814543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "H - GET - (Listar todos) Filtrar leiaute por uma página que NÃO exista registros",
                  "fullTitle": "Testes API - Cadastro de Leiaute 2 - Teste API Leiaute (Filtros) H - GET - (Listar todos) Filtrar leiaute por uma página que NÃO exista registros",
                  "timedOut": null,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    'Paginacao.Pagina': '1000'\n  }\n}).then(function (resposta) {\n  var fimLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.fm === '2024-03-01T02:00:00') fimLeiaute = c.fm;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno.length).to.be.equal(0); //Validando se na página 1000 o número de registros seja = 0\n});",
                  "err": {},
                  "uuid": "71b9b5d6-975e-49e4-b750-31903f1e3867",
                  "parentUUID": "34129f45-62d1-46d1-85e7-d40bdb814543",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "I - GET - (Listar todos) Filtrar leiaute pelo total de páginas",
                  "fullTitle": "Testes API - Cadastro de Leiaute 2 - Teste API Leiaute (Filtros) I - GET - (Listar todos) Filtrar leiaute pelo total de páginas",
                  "timedOut": null,
                  "duration": 320,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    'Paginacao.TotalPorPagina': '2'\n  }\n}).then(function (resposta) {\n  var fimLeiaute = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.fm === '2024-03-01T02:00:00') fimLeiaute = c.fm;\n  });\n  console.log(resposta);\n  expect(resposta.body.retorno.length).to.be.equal(2); //Validando o total de registros disponíveis por página. Nesse teste são 2 por página\n});",
                  "err": {},
                  "uuid": "bccf8abe-2a43-49e7-a1d5-ae3b5b23effb",
                  "parentUUID": "34129f45-62d1-46d1-85e7-d40bdb814543",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d93d7a5-38d3-4bf3-9126-412bfbf9b15d",
                "8e70d13c-0f40-4a52-a32a-a06c474b8f6a",
                "e4bb1c7e-2e56-4b29-ae1c-8dadd49b1321",
                "de0036d0-e7f1-4149-acfc-c65866599bf9",
                "3d6eb64d-b1a9-4464-ad6d-48c48a83c65f",
                "58deadb5-8d4a-49be-a759-d3ad46ba6f2e",
                "b4a0fbc7-569c-4c50-b95c-a7b94a4caa78",
                "71b9b5d6-975e-49e4-b750-31903f1e3867",
                "bccf8abe-2a43-49e7-a1d5-ae3b5b23effb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3018,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7fecc7b8-48bc-4617-b3e2-f473c3149727",
              "title": "3 - Teste API Leiaute (Validando: Limite de caracteres)",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A - POST - Limite de caracteres - codigo [50]",
                  "fullTitle": "Testes API - Cadastro de Leiaute 3 - Teste API Leiaute (Validando: Limite de caracteres) A - POST - Limite de caracteres - codigo [50]",
                  "timedOut": null,
                  "duration": 404,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '006666666606666666660666666666000666666660666666666066666666600066666666066666666606666666660',\n      descricao: 'Leiaute codigo [50] do modelo EFD Contribuições alterado pelo cy',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2025-03-01T00:00:00',\n        fim: '2025-04-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Codigo[0]).to.be.equal('O campo deve ter no máximo 50 caracteres');\n  });\n});",
                  "err": {},
                  "uuid": "2dd6c7aa-8d20-4a49-99dd-3e6f37a128c7",
                  "parentUUID": "7fecc7b8-48bc-4617-b3e2-f473c3149727",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "B - POST - Limite de caracteres - descricao [150]",
                  "fullTitle": "Testes API - Cadastro de Leiaute 3 - Teste API Leiaute (Validando: Limite de caracteres) B - POST - Limite de caracteres - descricao [150]",
                  "timedOut": null,
                  "duration": 320,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Buscando no cadastro o modelo registrado acima\ncy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute'\n}).then(function (resposta) {\n  var nomeModelo = null;\n  resposta.body.retorno.forEach(function (c) {\n    if (c.tipo === 'Sistema') nomeModelo = c.id;\n  }); //Cadastrando o Leiaute utilizando o ID do modelo cadastrado acima\n  cy.request({\n    method: 'POST',\n    url: '/Leiaute',\n    body: {\n      idModeloLeiaute: nomeModelo,\n      codigo: '066',\n      descricao: 'Leiaute 005 do modelo EFD Contribuições alterado pelo cy. Este manual visa a orientar a execução dos serviços destinados à emissão de documentos e escrituração de livros fiscais',\n      status: 'Inativo',\n      vigencia: {\n        inicio: '2025-03-01T00:00:00',\n        fim: '2025-04-01T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n  cy.get('@response').then(function (resposta) {\n    console.log(resposta);\n    expect(resposta.status).to.be.equal(400);\n    expect(resposta.body.errors.Descricao[0]).to.be.equal('O campo deve ter no máximo 150 caracteres');\n  });\n});",
                  "err": {},
                  "uuid": "517220c5-0b16-4790-b874-b6ddf3da602d",
                  "parentUUID": "7fecc7b8-48bc-4617-b3e2-f473c3149727",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "C - PUT - Limite de caracteres - codigo [50]",
                  "fullTitle": "Testes API - Cadastro de Leiaute 3 - Teste API Leiaute (Validando: Limite de caracteres) C - PUT - Limite de caracteres - codigo [50]",
                  "timedOut": null,
                  "duration": 263,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '77777'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '006666666606666666660666666666000666666660666666666066666666600066666666066666666606666666660',\n      descricao: 'Leiaute 77777 do modelo EFD Contribuições cy',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2024-03-01T02:00:00',\n        fim: '2024-03-30T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Codigo[0]).to.be.equal('O campo deve ter no máximo 50 caracteres');\n});",
                  "err": {},
                  "uuid": "7f3a45e2-cc23-4cb5-a544-7bd0ed1b0e32",
                  "parentUUID": "7fecc7b8-48bc-4617-b3e2-f473c3149727",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "D - PUT - Limite de caracteres - descricao [150]",
                  "fullTitle": "Testes API - Cadastro de Leiaute 3 - Teste API Leiaute (Validando: Limite de caracteres) D - PUT - Limite de caracteres - descricao [150]",
                  "timedOut": null,
                  "duration": 414,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '77777'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'PUT',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id),\n    body: {\n      idModeloLeiaute: \"\".concat(resposta.body.retorno[0].idModeloLeiaute),\n      codigo: '77777',\n      descricao: 'Leiaute 77777 do modelo EFD Contribuições cy. Este manual visa a orientar a execução dos serviços destinados à emissão de documentos e escrituração de livros fiscais',\n      status: 'Ativo',\n      vigencia: {\n        inicio: '2024-03-01T02:00:00',\n        fim: '2024-03-30T02:00:00'\n      }\n    },\n    failOnStatusCode: false\n  }).as('response');\n});\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(400);\n  expect(resposta.body.errors.Descricao[0]).to.be.equal('O campo deve ter no máximo 150 caracteres');\n});",
                  "err": {},
                  "uuid": "23e85dea-1910-41b5-8755-c2488217484a",
                  "parentUUID": "7fecc7b8-48bc-4617-b3e2-f473c3149727",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dd6c7aa-8d20-4a49-99dd-3e6f37a128c7",
                "517220c5-0b16-4790-b874-b6ddf3da602d",
                "7f3a45e2-cc23-4cb5-a544-7bd0ed1b0e32",
                "23e85dea-1910-41b5-8755-c2488217484a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1401,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14286415-9ae3-417c-bbd7-b412e2b9f869",
              "title": "4 - Testes API Leiaute - DELETE",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "A - DELETE - Cadastro de Leiaute (1-A)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE A - DELETE - Cadastro de Leiaute (1-A)",
                  "timedOut": null,
                  "duration": 333,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '88888'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'DELETE',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id)\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "7171c3a1-31a1-4b7a-94cf-85c89885059e",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "B - DELETE - Cadastro de Leiaute (1-H)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE B - DELETE - Cadastro de Leiaute (1-H)",
                  "timedOut": null,
                  "duration": 276,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '99995'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'DELETE',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id)\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "11d7b4ac-8e60-4a36-8b38-1d85dd9e299d",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "C - DELETE - Removendo leiaute cadastrado para o teste (2-A)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE C - DELETE - Removendo leiaute cadastrado para o teste (2-A)",
                  "timedOut": null,
                  "duration": 386,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '77777'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'DELETE',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id)\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "875e6fe0-2a60-4f92-a0f3-8da84aa705ec",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "D - DELETE - Removendo leiaute cadastrado para o teste (1-N)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE D - DELETE - Removendo leiaute cadastrado para o teste (1-N)",
                  "timedOut": null,
                  "duration": 331,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '111111'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'DELETE',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id)\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "872b28cc-5967-43c8-aeb2-319ed4a42e1c",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "E - DELETE - Removendo leiaute cadastrado para o teste (1-K)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE E - DELETE - Removendo leiaute cadastrado para o teste (1-K)",
                  "timedOut": null,
                  "duration": 299,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '99992'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'DELETE',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id)\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "72cffa0b-403e-4c1f-94f0-6a542f25969e",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "F - DELETE - Identificação do leiaute inválida",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE F - DELETE - Identificação do leiaute inválida",
                  "timedOut": null,
                  "duration": 234,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'DELETE',\n  url: \"/Leiaute/asdsafsf-fdsfsd\",\n  failOnStatusCode: false\n}).as('response');\ncy.get('@response').then(function (resposta) {\n  console.log(resposta);\n  expect(resposta.status).to.be.equal(404);\n  expect(resposta.body.errors[\"\"][0]).to.be.equal('A identificação do Leiaute é inválida');\n});",
                  "err": {},
                  "uuid": "24845514-cf5a-4056-9072-ca07a35d12ee",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "G - DELETE - Remover o Modelo cadastrado para os testes de leiaute (1-A)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE G - DELETE - Remover o Modelo cadastrado para os testes de leiaute (1-A)",
                  "timedOut": null,
                  "duration": 340,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute',\n  qs: {\n    nome: 'Teste para leiaute'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'DELETE',\n    url: \"/ModeloLeiaute/\".concat(resposta.body.retorno[0].id)\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "6409e51a-8fe7-4556-8c6b-352e7457d5ea",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "H - DELETE - Remover o leiaute cadastrado para os testes de leiaute (1-V)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE H - DELETE - Remover o leiaute cadastrado para os testes de leiaute (1-V)",
                  "timedOut": null,
                  "duration": 248,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '56789'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'DELETE',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id)\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "2df66398-ba0e-4a27-87e6-1ca064c641c3",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "I - DELETE - Remover o leiaute cadastrado para os testes de leiaute (1-V)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE I - DELETE - Remover o leiaute cadastrado para os testes de leiaute (1-V)",
                  "timedOut": null,
                  "duration": 264,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/Leiaute',\n  qs: {\n    codigo: '4859'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'DELETE',\n    url: \"/Leiaute/\".concat(resposta.body.retorno[0].id)\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "e54966aa-a895-463f-a219-6e3262b56db7",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "J - DELETE - Remover o Modelo cadastrado para os testes de leiaute (1-V)",
                  "fullTitle": "Testes API - Cadastro de Leiaute 4 - Testes API Leiaute - DELETE J - DELETE - Remover o Modelo cadastrado para os testes de leiaute (1-V)",
                  "timedOut": null,
                  "duration": 325,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: '/ModeloLeiaute',\n  qs: {\n    nome: 'Testando leiautes'\n  }\n}).then(function (resposta) {\n  cy.request({\n    method: 'DELETE',\n    url: \"/ModeloLeiaute/\".concat(resposta.body.retorno[0].id)\n  }).its('status').should('be.equal', 200);\n});",
                  "err": {},
                  "uuid": "dd79552a-fbb1-4147-8136-886bbb1ee4bc",
                  "parentUUID": "14286415-9ae3-417c-bbd7-b412e2b9f869",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7171c3a1-31a1-4b7a-94cf-85c89885059e",
                "11d7b4ac-8e60-4a36-8b38-1d85dd9e299d",
                "875e6fe0-2a60-4f92-a0f3-8da84aa705ec",
                "872b28cc-5967-43c8-aeb2-319ed4a42e1c",
                "72cffa0b-403e-4c1f-94f0-6a542f25969e",
                "24845514-cf5a-4056-9072-ca07a35d12ee",
                "6409e51a-8fe7-4556-8c6b-352e7457d5ea",
                "2df66398-ba0e-4a27-87e6-1ca064c641c3",
                "e54966aa-a895-463f-a219-6e3262b56db7",
                "dd79552a-fbb1-4147-8136-886bbb1ee4bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3036,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2beda62a-a924-4e05-9935-839f6d56b172",
              "title": "Arquivo morto",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cadastrando um modelo e depois um leiaute baseado no modelo",
                  "fullTitle": "Testes API - Cadastro de Leiaute Arquivo morto Cadastrando um modelo e depois um leiaute baseado no modelo",
                  "timedOut": null,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6b30bbdd-2110-4ec4-ac15-522f2ca13d53",
                  "parentUUID": "2beda62a-a924-4e05-9935-839f6d56b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cadastrar um leiaute baseado em um modelo qualquer que exista.",
                  "fullTitle": "Testes API - Cadastro de Leiaute Arquivo morto Cadastrar um leiaute baseado em um modelo qualquer que exista.",
                  "timedOut": null,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "690e1f7e-856e-4abe-99b2-9b590022d699",
                  "parentUUID": "2beda62a-a924-4e05-9935-839f6d56b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "PUT - Alterando (idModeloLeiaute) de um Leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute Arquivo morto PUT - Alterando (idModeloLeiaute) de um Leiaute",
                  "timedOut": null,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d28a8937-3674-4f12-9b17-e02ce0108afb",
                  "parentUUID": "2beda62a-a924-4e05-9935-839f6d56b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "POST - Cadastrando um Leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute Arquivo morto POST - Cadastrando um Leiaute",
                  "timedOut": null,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b2b87403-0080-40f4-b883-1f1af6e993ad",
                  "parentUUID": "2beda62a-a924-4e05-9935-839f6d56b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Tentando verificar se existe leiaute cadastrado para modelo de nome teste para leiaute",
                  "fullTitle": "Testes API - Cadastro de Leiaute Arquivo morto Tentando verificar se existe leiaute cadastrado para modelo de nome teste para leiaute",
                  "timedOut": null,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8861fd5c-b72f-4e17-9991-db5ee0166d19",
                  "parentUUID": "2beda62a-a924-4e05-9935-839f6d56b172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validando 2 condições",
                  "fullTitle": "Testes API - Cadastro de Leiaute Arquivo morto Validando 2 condições",
                  "timedOut": null,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "574a12b9-826e-4a55-b30b-4fc3df0de952",
                  "parentUUID": "2beda62a-a924-4e05-9935-839f6d56b172",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "6b30bbdd-2110-4ec4-ac15-522f2ca13d53",
                "690e1f7e-856e-4abe-99b2-9b590022d699",
                "d28a8937-3674-4f12-9b17-e02ce0108afb",
                "b2b87403-0080-40f4-b883-1f1af6e993ad",
                "8861fd5c-b72f-4e17-9991-db5ee0166d19",
                "574a12b9-826e-4a55-b30b-4fc3df0de952"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}